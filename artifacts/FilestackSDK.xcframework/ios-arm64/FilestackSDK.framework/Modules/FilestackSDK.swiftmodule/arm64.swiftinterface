// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FilestackSDK
import CommonCrypto
import Foundation
import Foundation/*.Bundle*/
import MobileCoreServices
import QuartzCore
import Swift
import UIKit
import os.log
import os
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FSUploadService) final public class UploadService : ObjectiveC.NSObject {
  public static let shared: UploadService
  final public var useBackgroundSession: Swift.Bool {
    get
    set
  }
  @objc deinit
}
extension UploadService : Foundation.URLSessionDataDelegate {
  @objc final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
}
public enum Error : Swift.Error {
  case cancelled
  case unknown
  case api(_: Swift.String)
  case custom(_: Swift.String)
  case wrapped(_: Swift.Error)
}
extension Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct MetadataOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias Element = MetadataOptions
  public typealias ArrayLiteralElement = MetadataOptions
  public typealias RawValue = Swift.Int
}
public struct PolicyCall : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias Element = PolicyCall
  public typealias ArrayLiteralElement = PolicyCall
  public typealias RawValue = Swift.Int
}
@objc(FSStorageAccess) public enum StorageAccess : Swift.UInt, Swift.CustomStringConvertible {
  case `private`
  case `public`
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension StorageAccess {
  public var description: Swift.String {
    get
  }
}
@objc(FSStorageLocation) public enum StorageLocation : Swift.UInt, Swift.CustomStringConvertible {
  case s3
  case dropbox
  case rackspace
  case azure
  case gcs
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension StorageLocation {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformAlign) public enum TransformAlign : Swift.UInt, Swift.CustomStringConvertible {
  case center
  case top
  case bottom
  case left
  case right
  case faces
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformAlign {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformAspectMode) public enum TransformAspectMode : Swift.UInt, Swift.CustomStringConvertible {
  case preserve
  case constrain
  case letterbox
  case pad
  case crop
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformAspectMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformBlurMode) public enum TransformBlurMode : Swift.UInt, Swift.CustomStringConvertible {
  case linear
  case gaussian
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformBlurMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformColorSpace) public enum TransformColorSpace : Swift.UInt {
  case rgb
  case cmyk
  case input
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformColorSpace : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformCropMode) public enum TransformCropMode : Swift.UInt, Swift.CustomStringConvertible {
  case thumb
  case crop
  case fill
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformCropMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformEnhancePreset) public enum TransformEnhancePreset : Swift.UInt, Swift.CustomStringConvertible {
  case auto
  case vivid
  case beautify
  case beautifyPlus
  case fixDark
  case fixNoise
  case fixTint
  case outdoor
  case fireworks
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformEnhancePreset {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformFiletype) public enum TransformFiletype : Swift.UInt, Swift.CustomStringConvertible {
  case doc
  case docx
  case html
  case jpg
  case odp
  case ods
  case odt
  case pjpg
  case pdf
  case png
  case ppt
  case pptx
  case svg
  case txt
  case webp
  case xls
  case xlsx
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformFiletype {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformFit) public enum TransformFit : Swift.UInt, Swift.CustomStringConvertible {
  case clip
  case crop
  case scale
  case max
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformFit {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformNoiseMode) public enum TransformNoiseMode : Swift.UInt, Swift.CustomStringConvertible {
  case none
  case low
  case medium
  case high
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformNoiseMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformPageFormat) public enum TransformPageFormat : Swift.UInt, Swift.CustomStringConvertible {
  case a2
  case a3
  case a4
  case a5
  case b4
  case b5
  case letter
  case legal
  case tabloid
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformPageFormat {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformPageOrientation) public enum TransformPageOrientation : Swift.UInt, Swift.CustomStringConvertible {
  case portrait
  case landscape
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformPageOrientation {
  public var description: Swift.String {
    get
  }
}
public struct TransformPosition : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias Element = TransformPosition
  public typealias ArrayLiteralElement = TransformPosition
  public typealias RawValue = Swift.Int
}
@objc(FSTransformShapeType) public enum TransformShapeType : Swift.UInt, Swift.CustomStringConvertible {
  case rect
  case oval
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformShapeType {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformStyleMode) public enum TransformStyleMode : Swift.UInt, Swift.CustomStringConvertible {
  case artwork
  case photo
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformStyleMode {
  public var description: Swift.String {
    get
  }
}
@available(*, deprecated, renamed: "UploadState")
public typealias UploadStatus = UploadState
@objc(FSUploadStatus) public enum UploadState : Swift.UInt {
  case notStarted
  case inProgress
  case completed
  case cancelled
  @available(*, deprecated, message: "Marked for removal in version 3.0.")
  case failed
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension UploadState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Client {
  @discardableResult
  @available(*, deprecated, message: "Marked for removal in version 3.0. Please use upload(using:options:queue:uploadProgress:completionHandler:) instead")
  @objc dynamic public func multiPartUpload(from localURL: Foundation.URL, storeOptions: StorageOptions = StorageOptions(location: .s3, access: .private), useIntelligentIngestionIfAvailable: Swift.Bool = true, queue: Dispatch.DispatchQueue = .main, startUploadImmediately: Swift.Bool = true, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  @available(*, deprecated, message: "Marked for removal in version 3.0. Please use upload(using:options:queue:uploadProgress:completionHandler:) instead")
  @objc dynamic public func multiFileUpload(from localURLs: [Foundation.URL], storeOptions: StorageOptions = StorageOptions(location: .s3, access: .private), useIntelligentIngestionIfAvailable: Swift.Bool = true, queue: Dispatch.DispatchQueue = .main, startUploadImmediately: Swift.Bool = true, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> Uploader
}
extension Client {
  @discardableResult
  @objc dynamic public func uploadURL(using localURL: Foundation.NSURL, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  @objc dynamic public func uploadMultipleURLs(using localURLs: [Foundation.NSURL], options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> Uploader
  @discardableResult
  @objc dynamic public func uploadData(using data: Foundation.NSData, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  @objc dynamic public func uploadMultipleData(using multipleData: [Foundation.NSData], options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> Uploader
}
extension Data : Uploadable {
  public var filename: Swift.String? {
    get
  }
  public var size: Swift.UInt64? {
    get
  }
  public var mimeType: Swift.String? {
    get
  }
}
extension StorageOptions {
  public func asDictionary() -> [Swift.String : Any]
}
extension Transformable {
  @available(*, deprecated, message: "Marked for removal in version 3.0. Use the new store(using:base64Decode:queue:completionHandler) instead")
  @discardableResult
  @objc dynamic public func store(fileName: Swift.String? = nil, location: StorageLocation, path: Swift.String? = nil, container: Swift.String? = nil, region: Swift.String? = nil, access: StorageAccess, base64Decode: Swift.Bool, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (FileLink?, JSONResponse) -> Swift.Void) -> Self
}
extension URL : Uploadable {
  public var filename: Swift.String? {
    get
  }
  public var size: Swift.UInt64? {
    get
  }
  public var mimeType: Swift.String? {
    get
  }
}
@objc(FSClient) public class Client : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, security: Security? = nil)
  @available(*, deprecated, message: "Marked for removal in version 3.0. Please use `init(apiKey:security:)` instead.")
  @objc public init(apiKey: Swift.String, security: Security? = nil, storage _: StorageLocation)
  @objc deinit
  @objc override dynamic public init()
}
extension Client {
  @objc dynamic public var apiKey: Swift.String {
    @objc get
  }
  @objc dynamic public var security: Security? {
    @objc get
  }
}
extension Client {
  @objc dynamic public func fileLink(for handle: Swift.String) -> FileLink
  @objc dynamic public func transformable(handle: Swift.String) -> Transformable
  @objc dynamic public func transformable(handles: [Swift.String]) -> Transformable
  @objc dynamic public func transformable(externalURL: Foundation.URL) -> Transformable
  @objc dynamic public func transformable(externalURLs: [Foundation.URL]) -> Transformable
  @discardableResult
  public func upload(using uploadable: Uploadable, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  public func upload(using uploadables: [Uploadable]? = nil, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> DeferredAdd & Uploader
}
extension Client {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@available(*, deprecated, renamed: "DataResponse")
public typealias NetworkDataResponse = DataResponse
@_hasMissingDesignatedInitializers @objc(FSNetworkDataResponse) public class DataResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let data: Foundation.Data?
  @objc public var error: Swift.Error?
  @objc deinit
  @objc override dynamic public init()
}
extension DataResponse {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@available(*, deprecated, renamed: "DownloadResponse")
public typealias NetworkDownloadResponse = DownloadResponse
@_hasMissingDesignatedInitializers @objc(FSNetworkDownloadResponse) public class DownloadResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let temporaryURL: Foundation.URL?
  @objc final public let destinationURL: Foundation.URL?
  @objc public var error: Swift.Error?
  @objc deinit
  @objc override dynamic public init()
}
extension DownloadResponse {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc(FSFileLink) public class FileLink : ObjectiveC.NSObject {
  final public let apiKey: Swift.String
  final public let security: Security?
  @objc final public let handle: Swift.String
  @objc public var url: Foundation.URL {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension FileLink {
  @objc dynamic public func getContent(parameters: [Swift.String : Any]? = nil, queue: Dispatch.DispatchQueue? = .main, downloadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func getTags(queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (JSONResponse) -> Swift.Void)
  @objc dynamic public func getSafeForWork(queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (JSONResponse) -> Swift.Void)
  public func getMetadata(options: MetadataOptions, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (JSONResponse) -> Swift.Void)
  @objc dynamic public func download(destinationURL: Foundation.URL, parameters: [Swift.String : Any]? = nil, queue: Dispatch.DispatchQueue? = .main, downloadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (DownloadResponse) -> Swift.Void)
  @objc dynamic public func delete(parameters: [Swift.String : Any]? = nil, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func overwrite(parameters: [Swift.String : Any]? = nil, fileURL: Foundation.URL, queue: Dispatch.DispatchQueue? = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func overwrite(parameters: [Swift.String : Any]? = nil, remoteURL: Foundation.URL, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func transformable() -> Transformable
}
extension FileLink {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@available(*, deprecated, renamed: "JSONResponse")
public typealias NetworkJSONResponse = JSONResponse
@_hasMissingDesignatedInitializers @objc(FSNetworkJSONResponse) public class JSONResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let json: [Swift.String : Any]?
  @objc public var error: Swift.Error?
  @objc override dynamic public init()
  @objc deinit
}
extension JSONResponse {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSPolicy) public class Policy : ObjectiveC.NSObject {
  final public let expiry: Foundation.Date
  final public let call: PolicyCall?
  public var handle: Swift.String?
  public var url: Swift.String?
  public var maxSize: Swift.UInt?
  public var minSize: Swift.UInt?
  public var path: Swift.String?
  public var container: Swift.String?
  @objc convenience public init(expiry: Foundation.Date)
  convenience public init(expiry: Foundation.Date, call: PolicyCall)
  @nonobjc public init(expiry: Foundation.Date, call: PolicyCall? = nil, handle: Swift.String? = nil, url: Swift.String? = nil, maxSize: Swift.UInt? = nil, minSize: Swift.UInt? = nil, path: Swift.String? = nil, container: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension Policy {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSSecurity) public class Security : ObjectiveC.NSObject {
  final public let encodedPolicy: Swift.String
  final public let signature: Swift.String
  @objc convenience public init(policy: Policy, appSecret: Swift.String) throws
  @objc public init(encodedPolicy: Swift.String, signature: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension Security {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSStorageOptions) public class StorageOptions : ObjectiveC.NSObject {
  @objc final public let location: StorageLocation
  @objc public var region: Swift.String?
  @objc public var container: Swift.String?
  @objc public var path: Swift.String?
  @objc public var filename: Swift.String?
  @objc public var mimeType: Swift.String?
  public var access: StorageAccess?
  @objc public var workflows: [Swift.String]?
  @objc convenience public init(location: StorageLocation)
  @objc convenience public init(location: StorageLocation, access: StorageAccess)
  @nonobjc public init(location: StorageLocation, region: Swift.String? = nil, container: Swift.String? = nil, path: Swift.String? = nil, filename: Swift.String? = nil, mimeType: Swift.String? = nil, access: StorageAccess? = nil, workflows: [Swift.String]? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension StorageOptions {
  @objc public static var defaults: StorageOptions
}
extension StorageOptions {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers public class Transformable : ObjectiveC.NSObject {
  @objc final public let apiKey: Swift.String
  @objc final public let security: Security?
  @objc public var handle: Swift.String? {
    @objc get
  }
  @objc public var handles: [Swift.String]? {
    @objc get
  }
  @objc public var externalURL: Foundation.URL? {
    @objc get
  }
  @objc public var externalURLs: [Foundation.URL]? {
    @objc get
  }
  @objc public var url: Foundation.URL {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Transformable {
  @discardableResult
  public func add(transform: Transform) -> Self
  @discardableResult
  @objc dynamic public func debug() -> Self
  @discardableResult
  @objc dynamic public func store(using options: StorageOptions, base64Decode: Swift.Bool = false, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (FileLink?, JSONResponse) -> Swift.Void) -> Self
}
extension Transformable {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSUploadOptions) public class UploadOptions : ObjectiveC.NSObject {
  @objc public static var defaultPartUploadConcurrency: Swift.Int
  @objc public static var defaultChunkUploadConcurrency: Swift.Int
  @objc public static var defaults: UploadOptions
  @objc public var preferIntelligentIngestion: Swift.Bool
  @objc public var startImmediately: Swift.Bool
  @objc public var deleteTemporaryFilesAfterUpload: Swift.Bool
  @objc public var storeOptions: StorageOptions
  @objc public var uploadTags: [Swift.String : Swift.String]
  @objc public var partUploadConcurrency: Swift.Int
  @objc public var chunkUploadConcurrency: Swift.Int
  @objc public init(preferIntelligentIngestion: Swift.Bool, startImmediately: Swift.Bool, deleteTemporaryFilesAfterUpload: Swift.Bool, storeOptions: StorageOptions = .defaults, uploadTags: [Swift.String : Swift.String] = [:], partUploadConcurrency: Swift.Int = UploadOptions.defaultPartUploadConcurrency, chunkUploadConcurrency: Swift.Int = UploadOptions.defaultChunkUploadConcurrency)
  @objc override dynamic public init()
  @objc deinit
}
extension UploadOptions {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers open class BaseOperation<Success> : Foundation.Operation {
  public typealias Result = Swift.Result<Success, Error>
  @objc override dynamic open var isReady: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func start()
  @objc override dynamic open func cancel()
  open func finish(with result: BaseOperation<Success>.Result)
  @objc override dynamic public init()
  @objc deinit
}
extension BaseOperation {
  open var result: BaseOperation<Success>.Result {
    get
  }
}
@objc(FSCancellable) public protocol Cancellable {
  @objc @discardableResult
  func cancel() -> Swift.Bool
}
public protocol DeferredAdd {
  @discardableResult
  func add(uploadables: [Uploadable]) -> Swift.Bool
}
@objc(FSMonitorizable) public protocol Monitorizable {
  @objc var progress: Foundation.Progress { get }
}
@objc(FSStartable) public protocol Startable {
  @objc @discardableResult
  func start() -> Swift.Bool
  @objc func uploadFiles()
}
public protocol Uploadable {
  var filename: Swift.String? { get }
  var size: Swift.UInt64? { get }
  var mimeType: Swift.String? { get }
}
@objc(FSUploader) public protocol Uploader : Cancellable, Monitorizable, Startable {
  @objc var uuid: Foundation.UUID { get }
  @objc var state: UploadState { get }
}
@_hasMissingDesignatedInitializers public class ASCIITransform : Transform {
  public init()
  @objc deinit
}
extension ASCIITransform {
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func foreground(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func colored() -> Self
  @discardableResult
  public func size(_ value: Swift.Int) -> Self
  @discardableResult
  public func reverse() -> Self
}
@_hasMissingDesignatedInitializers public class AVTransform : Transform {
  public init()
  @objc deinit
}
extension AVTransform {
  @discardableResult
  public func preset(_ value: Swift.String) -> Self
  @discardableResult
  public func force(_ value: Swift.Bool) -> Self
  @discardableResult
  public func width(_ value: Swift.Int) -> Self
  @discardableResult
  public func height(_ value: Swift.Int) -> Self
  @discardableResult
  public func title(_ value: Swift.String) -> Self
  @discardableResult
  public func extName(_ value: Swift.String) -> Self
  @discardableResult
  public func fileName(_ value: Swift.String) -> Self
  @discardableResult
  public func location(_ value: StorageLocation) -> Self
  @discardableResult
  public func path(_ value: Swift.String) -> Self
  @discardableResult
  public func access(_ value: StorageAccess) -> Self
  @discardableResult
  public func container(_ value: Swift.String) -> Self
  @discardableResult
  public func upscale(_ value: Swift.Bool) -> Self
  @discardableResult
  public func aspectMode(_ value: TransformAspectMode) -> Self
  @discardableResult
  public func twoPass(_ value: Swift.Bool) -> Self
  @discardableResult
  public func videoBitRate(_ value: Swift.Int) -> Self
  @discardableResult
  public func fps(_ value: Swift.Int) -> Self
  @discardableResult
  public func keyframeInterval(_ value: Swift.Int) -> Self
  @discardableResult
  public func audioBitRate(_ value: Swift.Int) -> Self
  @discardableResult
  public func audioSampleRate(_ value: Swift.Int) -> Self
  @discardableResult
  public func audioChannels(_ value: Swift.Int) -> Self
  @discardableResult
  public func clipLength(_ value: Swift.String) -> Self
  @discardableResult
  public func clipOffset(_ value: Swift.String) -> Self
  @discardableResult
  public func watermarkURL(_ value: Foundation.URL) -> Self
  @discardableResult
  public func watermarkTop(_ value: Swift.Int) -> Self
  @discardableResult
  public func watermarkBottom(_ value: Swift.Int) -> Self
  @discardableResult
  public func watermarkLeft(_ value: Swift.Int) -> Self
  @discardableResult
  public func watermarkRight(_ value: Swift.Int) -> Self
  @discardableResult
  public func watermarkWidth(_ value: Swift.Int) -> Self
  @discardableResult
  public func watermarkHeight(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class AnimateTransform : Transform {
  public init()
  @objc deinit
}
extension AnimateTransform {
  @discardableResult
  public func delay(_ value: Swift.Int) -> Self
  @discardableResult
  public func loop(_ value: Swift.Int) -> Self
  @discardableResult
  public func width(_ value: Swift.Int) -> Self
  @discardableResult
  public func height(_ value: Swift.Int) -> Self
  @discardableResult
  public func fit(_ value: TransformFit) -> Self
  @discardableResult
  public func align(_ value: TransformPosition) -> Self
  @discardableResult
  public func background(_ value: Swift.String) -> Self
}
@_hasMissingDesignatedInitializers public class AutoImageTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BlackAndWhiteTransform : Transform {
  public init()
  @objc deinit
}
extension BlackAndWhiteTransform {
  @discardableResult
  public func threshold(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class BlurFacesTransform : Transform {
  public init()
  @objc deinit
}
extension BlurFacesTransform {
  @discardableResult
  public func amount(_ value: Swift.Float) -> Self
  @discardableResult
  public func type(_ value: TransformShapeType) -> Self
  @discardableResult
  public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func buffer(_ value: Swift.Int) -> Self
  @discardableResult
  public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  public func allFaces() -> Self
  @discardableResult
  public func faces(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers public class BlurTransform : Transform {
  public init()
  @objc deinit
}
extension BlurTransform {
  @discardableResult
  public func amount(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class BorderTransform : Transform {
  public init()
  @objc deinit
}
extension BorderTransform {
  @discardableResult
  public func width(_ value: Swift.Int) -> Self
  @discardableResult
  public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class CacheTransform : Transform {
  public init()
  @objc deinit
}
extension CacheTransform {
  @discardableResult
  public func turnOff() -> Self
  @discardableResult
  public func expiry(_ value: Swift.Int) -> Self
  @discardableResult
  public func maxExpiry() -> Self
}
@_hasMissingDesignatedInitializers public class CircleTransform : Transform {
  public init()
  @objc deinit
}
extension CircleTransform {
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class CollageTransform : Transform {
  @objc deinit
}
extension CollageTransform {
  @discardableResult
  public func margin(_ value: Swift.Int) -> Self
  @discardableResult
  public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func cropFit() -> Self
  @discardableResult
  public func autorotate() -> Self
}
@_inheritsConvenienceInitializers @objc(FSCollageTransformCollection) public class CollageTransformCollection : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension CollageTransformCollection {
  @discardableResult
  @objc(addResource:) dynamic public func add(_ resource: Swift.String) -> Self
  @discardableResult
  @objc(addResources:) dynamic public func add(_ resources: [Swift.String]) -> Self
}
@_hasMissingDesignatedInitializers public class CompressTransform : Transform {
  public init()
  @objc deinit
}
extension CompressTransform {
  @discardableResult
  public func metadata(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers public class ConvertTransform : Transform {
  public init()
  @objc deinit
}
extension ConvertTransform {
  @discardableResult
  public func format(_ value: TransformFiletype) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func page(_ value: Swift.Int) -> Self
  @discardableResult
  public func density(_ value: Swift.Int) -> Self
  @discardableResult
  public func compress() -> Self
  @discardableResult
  public func quality(_ value: Swift.Int) -> Self
  @discardableResult
  public func preserveInputQuality() -> Self
  @discardableResult
  public func strip() -> Self
  @discardableResult
  public func colorSpace(_ value: TransformColorSpace) -> Self
  @discardableResult
  public func secure() -> Self
  @discardableResult
  public func docInfo() -> Self
  @discardableResult
  public func pageFormat(_ value: TransformPageFormat) -> Self
  @discardableResult
  public func pageOrientation(_ value: TransformPageOrientation) -> Self
}
@_hasMissingDesignatedInitializers public class CopyrightTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CropFacesTransform : Transform {
  public init()
  @objc deinit
}
extension CropFacesTransform {
  @discardableResult
  public func mode(_ value: TransformCropMode) -> Self
  @discardableResult
  public func width(_ value: Swift.Int) -> Self
  @discardableResult
  public func height(_ value: Swift.Int) -> Self
  @discardableResult
  public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func allFaces() -> Self
  @discardableResult
  public func buffer(_ value: Swift.Int) -> Self
  @discardableResult
  public func faces(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers public class CropTransform : Transform {
  public init(x: Swift.Int, y: Swift.Int, width: Swift.Int, height: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DetectFacesTransform : Transform {
  public init()
  @objc deinit
}
extension DetectFacesTransform {
  @discardableResult
  public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func export(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers public class DocumentDetectionTransform : Transform {
  public init()
  @objc deinit
}
extension DocumentDetectionTransform {
  @discardableResult
  public func coords(_ value: Swift.Bool) -> Self
  @discardableResult
  public func preprocess(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers public class EnhanceTransform : Transform {
  public init()
  @objc deinit
}
extension EnhanceTransform {
  @discardableResult
  public func preset(_ value: TransformEnhancePreset) -> Self
}
@_hasMissingDesignatedInitializers public class FallbackTransform : Transform {
  public init()
  @objc deinit
}
extension FallbackTransform {
  @discardableResult
  public func handle(_ value: Swift.String) -> Self
  @discardableResult
  public func cache(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class FlipTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FlopTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageSizeTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MinifyCSSTransform : Transform {
  public init()
  @objc deinit
}
extension MinifyCSSTransform {
  @discardableResult
  public func level(_ value: Swift.Int) -> Self
  @discardableResult
  public func gzip(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers public class MinifyJSTransform : Transform {
  public init()
  @objc deinit
}
extension MinifyJSTransform {
  @discardableResult
  public func booleans(_ value: Swift.Bool) -> Self
  @discardableResult
  public func builtIns(_ value: Swift.Bool) -> Self
  @discardableResult
  public func consecutiveAdds(_ value: Swift.Bool) -> Self
  @discardableResult
  public func deadcode(_ value: Swift.Bool) -> Self
  @discardableResult
  public func evaluate(_ value: Swift.Bool) -> Self
  @discardableResult
  public func flipComparisons(_ value: Swift.Bool) -> Self
  @discardableResult
  public func guards(_ value: Swift.Bool) -> Self
  @discardableResult
  public func infinity(_ value: Swift.Bool) -> Self
  @discardableResult
  public func mangle(_ value: Swift.Bool) -> Self
  @discardableResult
  public func memberExpressions(_ value: Swift.Bool) -> Self
  @discardableResult
  public func mergeVars(_ value: Swift.Bool) -> Self
  @discardableResult
  public func numericLiterals(_ value: Swift.Bool) -> Self
  @discardableResult
  public func propertyLiterals(_ value: Swift.Bool) -> Self
  @discardableResult
  public func regexpConstructors(_ value: Swift.Bool) -> Self
  @discardableResult
  public func removeConsole(_ value: Swift.Bool) -> Self
  @discardableResult
  public func removeDebugger(_ value: Swift.Bool) -> Self
  @discardableResult
  public func removeUndefined(_ value: Swift.Bool) -> Self
  @discardableResult
  public func simplify(_ value: Swift.Bool) -> Self
  @discardableResult
  public func simplifyComparisons(_ value: Swift.Bool) -> Self
  @discardableResult
  public func typeConstructors(_ value: Swift.Bool) -> Self
  @discardableResult
  public func undefinedToVoid(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers public class ModulateTransform : Transform {
  public init()
  @objc deinit
}
extension ModulateTransform {
  @discardableResult
  public func brightness(_ value: Swift.Int) -> Self
  @discardableResult
  public func saturation(_ value: Swift.Int) -> Self
  @discardableResult
  public func hue(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class MonochromeTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NegativeTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoMetadataTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OCRTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OilPaintTransform : Transform {
  public init()
  @objc deinit
}
extension OilPaintTransform {
  @discardableResult
  public func amount(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class PDFConvertTransform : Transform {
  public init()
  @objc deinit
}
extension PDFConvertTransform {
  @discardableResult
  public func pageOrientation(_ value: TransformPageOrientation) -> Self
  @discardableResult
  public func pageFormat(_ value: TransformPageFormat) -> Self
  @discardableResult
  public func pages(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers public class PDFInfoTransform : Transform {
  public init()
  @objc deinit
}
extension PDFInfoTransform {
  @discardableResult
  public func colorInfo() -> Self
}
@_hasMissingDesignatedInitializers public class PDFMonochromeTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PartialBlurTransform : Transform {
  public init(objects: [CoreGraphics.CGRect])
  @objc deinit
}
extension PartialBlurTransform {
  @discardableResult
  public func amount(_ value: Swift.Int) -> Self
  @discardableResult
  public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  public func type(_ value: TransformShapeType) -> Self
}
@_hasMissingDesignatedInitializers public class PartialPixelateTransform : Transform {
  public init(objects: [CoreGraphics.CGRect])
  @objc deinit
}
extension PartialPixelateTransform {
  @discardableResult
  public func amount(_ value: Swift.Int) -> Self
  @discardableResult
  public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  public func type(_ value: TransformShapeType) -> Self
}
@_hasMissingDesignatedInitializers public class PixelateFacesTransform : Transform {
  public init()
  @objc deinit
}
extension PixelateFacesTransform {
  @discardableResult
  public func amount(_ value: Swift.Int = 10) -> Self
  @discardableResult
  public func type(_ value: TransformShapeType) -> Self
  @discardableResult
  public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  public func buffer(_ value: Swift.Int) -> Self
  @discardableResult
  public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  public func allFaces() -> Self
  @discardableResult
  public func faces(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers public class PixelateTransform : Transform {
  public init()
  @objc deinit
}
extension PixelateTransform {
  @discardableResult
  public func amount(_ value: Swift.Int = 2) -> Self
}
@_hasMissingDesignatedInitializers public class PolaroidTransform : Transform {
  public init()
  @objc deinit
}
extension PolaroidTransform {
  @discardableResult
  public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func rotate(_ value: Swift.Int) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class ProgressiveJPEGTransform : Transform {
  public init()
  @objc deinit
}
extension ProgressiveJPEGTransform {
  @discardableResult
  public func quality(_ value: Swift.Int) -> Self
  @discardableResult
  public func metadata(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers public class QualityTransform : Transform {
  public init(value: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RedEyeRemovalTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResizeTransform : Transform {
  public init()
  @objc deinit
}
extension ResizeTransform {
  @discardableResult
  public func width(_ value: Swift.Int) -> Self
  @discardableResult
  public func height(_ value: Swift.Int) -> Self
  @discardableResult
  public func fit(_ value: TransformFit) -> Self
  @discardableResult
  public func align(_ value: TransformAlign) -> Self
}
@_hasMissingDesignatedInitializers public class RotateTransform : Transform {
  public init()
  public init(deg: Swift.Int)
  @objc deinit
}
extension RotateTransform {
  @discardableResult
  public func exif(_ value: Swift.Bool) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class RoundedCornersTransform : Transform {
  public init()
  @objc deinit
}
extension RoundedCornersTransform {
  @discardableResult
  public func maxRadius() -> Self
  @discardableResult
  public func radius(_ value: Swift.Int) -> Self
  @discardableResult
  public func blur(_ value: Swift.Float = 0.3) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class SecureForWorkTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SepiaTransform : Transform {
  public init()
  @objc deinit
}
extension SepiaTransform {
  @discardableResult
  public func tone(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class ShadowTransform : Transform {
  public init()
  @objc deinit
}
extension ShadowTransform {
  @discardableResult
  public func blur(_ value: Swift.Int) -> Self
  @discardableResult
  public func opacity(_ value: Swift.Int) -> Self
  @discardableResult
  public func vector(x: Swift.Int, y: Swift.Int) -> Self
  @discardableResult
  public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class SharpenTransform : Transform {
  public init()
  @objc deinit
}
extension SharpenTransform {
  @discardableResult
  public func amount(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers public class TagsTransform : Transform {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TornEdgesTransform : Transform {
  public init()
  @objc deinit
}
extension TornEdgesTransform {
  @discardableResult
  public func spread(start: Swift.Int, end: Swift.Int) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class Transform {
  @objc deinit
}
extension Transform {
  public typealias Animate = AnimateTransform
  public typealias ASCII = ASCIITransform
  public typealias AutoImage = AutoImageTransform
  public typealias AV = AVTransform
  public typealias BlackAndWhite = BlackAndWhiteTransform
  public typealias BlurFaces = BlurFacesTransform
  public typealias Blur = BlurTransform
  public typealias Border = BorderTransform
  public typealias Cache = CacheTransform
  public typealias Circle = CircleTransform
  public typealias Collage = CollageTransform
  public typealias Compress = CompressTransform
  public typealias Convert = ConvertTransform
  public typealias Copyright = CopyrightTransform
  public typealias CropFaces = CropFacesTransform
  public typealias Crop = CropTransform
  public typealias DetectFaces = DetectFacesTransform
  public typealias DocumentDetection = DocumentDetectionTransform
  public typealias Enhance = EnhanceTransform
  public typealias Fallback = FallbackTransform
  public typealias Flip = FlipTransform
  public typealias Flop = FlopTransform
  public typealias ImageSize = ImageSizeTransform
  public typealias MinifyCSS = MinifyCSSTransform
  public typealias MinifyJS = MinifyJSTransform
  public typealias Modulate = ModulateTransform
  public typealias Monochrome = MonochromeTransform
  public typealias Negative = NegativeTransform
  public typealias NoMetadata = NoMetadataTransform
  public typealias OCR = OCRTransform
  public typealias OilPaint = OilPaintTransform
  public typealias PartialBlur = PartialBlurTransform
  public typealias PartialPixelate = PartialPixelateTransform
  public typealias PDFConvert = PDFConvertTransform
  public typealias PDFInfo = PDFInfoTransform
  public typealias PDFMonochrome = PDFMonochromeTransform
  public typealias PixelateFaces = PixelateFacesTransform
  public typealias Pixelate = PixelateTransform
  public typealias Polaroid = PolaroidTransform
  public typealias ProgressiveJPEG = ProgressiveJPEGTransform
  public typealias Quality = QualityTransform
  public typealias RedEyeRemoval = RedEyeRemovalTransform
  public typealias Resize = ResizeTransform
  public typealias Rotate = RotateTransform
  public typealias RoundedCorners = RoundedCornersTransform
  public typealias SecureForWork = SecureForWorkTransform
  public typealias Sepia = SepiaTransform
  public typealias Shadow = ShadowTransform
  public typealias Sharpen = SharpenTransform
  public typealias TornEdges = TornEdgesTransform
  public typealias Upscale = UpscaleTransform
  public typealias URLScreenshot = URLScreenshotTransform
  public typealias Vignette = VignetteTransform
  public typealias Watermark = WatermarkTransform
  public typealias Zip = ZipTransform
}
@_hasMissingDesignatedInitializers public class URLScreenshotTransform : Transform {
  public init()
  @objc deinit
}
extension URLScreenshotTransform {
  @discardableResult
  public func mobileAgent() -> Self
  @discardableResult
  public func windowMode() -> Self
  @discardableResult
  public func width(_ value: Swift.Int) -> Self
  @discardableResult
  public func height(_ value: Swift.Int) -> Self
  @discardableResult
  public func delay(_ value: Swift.Int) -> Self
  @discardableResult
  public func orientation(_ value: TransformPageOrientation) -> Self
  @discardableResult
  public func device(_ value: Swift.String) -> Self
}
@_hasMissingDesignatedInitializers public class UpscaleTransform : Transform {
  public init()
  @objc deinit
}
extension UpscaleTransform {
  @discardableResult
  public func noUpscale() -> Self
  @discardableResult
  public func noise(_ value: TransformNoiseMode) -> Self
  @discardableResult
  public func style(_ value: TransformStyleMode) -> Self
}
@_hasMissingDesignatedInitializers public class VignetteTransform : Transform {
  public init()
  @objc deinit
}
extension VignetteTransform {
  @discardableResult
  public func amount(_ value: Swift.Int) -> Self
  @discardableResult
  public func blurMode(_ value: TransformBlurMode) -> Self
  @discardableResult
  public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers public class WatermarkTransform : Transform {
  public init(file: Swift.String)
  @objc deinit
}
extension WatermarkTransform {
  @discardableResult
  public func size(_ value: Swift.Int) -> Self
  @discardableResult
  public func position(_ value: TransformPosition) -> Self
}
@_hasMissingDesignatedInitializers public class ZipTransform : Transform {
  public init()
  @objc deinit
}
extension StorageAccess : Swift.Equatable {}
extension StorageAccess : Swift.Hashable {}
extension StorageAccess : Swift.RawRepresentable {}
extension StorageLocation : Swift.Equatable {}
extension StorageLocation : Swift.Hashable {}
extension StorageLocation : Swift.RawRepresentable {}
extension TransformAlign : Swift.Equatable {}
extension TransformAlign : Swift.Hashable {}
extension TransformAlign : Swift.RawRepresentable {}
extension TransformAspectMode : Swift.Equatable {}
extension TransformAspectMode : Swift.Hashable {}
extension TransformAspectMode : Swift.RawRepresentable {}
extension TransformBlurMode : Swift.Equatable {}
extension TransformBlurMode : Swift.Hashable {}
extension TransformBlurMode : Swift.RawRepresentable {}
extension TransformColorSpace : Swift.Equatable {}
extension TransformColorSpace : Swift.Hashable {}
extension TransformColorSpace : Swift.RawRepresentable {}
extension TransformCropMode : Swift.Equatable {}
extension TransformCropMode : Swift.Hashable {}
extension TransformCropMode : Swift.RawRepresentable {}
extension TransformEnhancePreset : Swift.Equatable {}
extension TransformEnhancePreset : Swift.Hashable {}
extension TransformEnhancePreset : Swift.RawRepresentable {}
extension TransformFiletype : Swift.Equatable {}
extension TransformFiletype : Swift.Hashable {}
extension TransformFiletype : Swift.RawRepresentable {}
extension TransformFit : Swift.Equatable {}
extension TransformFit : Swift.Hashable {}
extension TransformFit : Swift.RawRepresentable {}
extension TransformNoiseMode : Swift.Equatable {}
extension TransformNoiseMode : Swift.Hashable {}
extension TransformNoiseMode : Swift.RawRepresentable {}
extension TransformPageFormat : Swift.Equatable {}
extension TransformPageFormat : Swift.Hashable {}
extension TransformPageFormat : Swift.RawRepresentable {}
extension TransformPageOrientation : Swift.Equatable {}
extension TransformPageOrientation : Swift.Hashable {}
extension TransformPageOrientation : Swift.RawRepresentable {}
extension TransformShapeType : Swift.Equatable {}
extension TransformShapeType : Swift.Hashable {}
extension TransformShapeType : Swift.RawRepresentable {}
extension TransformStyleMode : Swift.Equatable {}
extension TransformStyleMode : Swift.Hashable {}
extension TransformStyleMode : Swift.RawRepresentable {}
extension UploadState : Swift.Equatable {}
extension UploadState : Swift.Hashable {}
extension UploadState : Swift.RawRepresentable {}
