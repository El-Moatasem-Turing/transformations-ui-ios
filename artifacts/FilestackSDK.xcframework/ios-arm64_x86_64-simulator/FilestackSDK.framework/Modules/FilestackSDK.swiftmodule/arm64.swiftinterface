// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FilestackSDK
import CommonCrypto
import Foundation
import Foundation/*.Bundle*/
import MobileCoreServices
@_exported import ObjcDefs
import QuartzCore
import Swift
import UIKit
import os.log
import os
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FSUploadService) final public class UploadService : ObjectiveC.NSObject {
  public static let shared: UploadService
  final public var useBackgroundSession: Swift.Bool {
    get
    set
  }
  @objc deinit
}
extension UploadService : Foundation.URLSessionDataDelegate {
  @objc final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
}
public enum Error : Swift.Error {
  case cancelled
  case unknown
  case api(_: Swift.String)
  case custom(_: Swift.String)
  case wrapped(_: Swift.Error)
}
extension Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias MetadataOptions = ObjcDefs.FSMetadataOptions
public typealias PolicyCall = ObjcDefs.FSPolicyCall
@objc(FSStorageAccess) public enum StorageAccess : Swift.UInt, Swift.CustomStringConvertible {
  case `private`
  case `public`
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension StorageAccess {
  public var description: Swift.String {
    get
  }
}
@objc(FSStorageLocation) public enum StorageLocation : Swift.UInt, Swift.CustomStringConvertible {
  case s3
  case dropbox
  case rackspace
  case azure
  case gcs
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension StorageLocation {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformAlign) public enum TransformAlign : Swift.UInt, Swift.CustomStringConvertible {
  case center
  case top
  case bottom
  case left
  case right
  case faces
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformAlign {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformAspectMode) public enum TransformAspectMode : Swift.UInt, Swift.CustomStringConvertible {
  case preserve
  case constrain
  case letterbox
  case pad
  case crop
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformAspectMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformBlurMode) public enum TransformBlurMode : Swift.UInt, Swift.CustomStringConvertible {
  case linear
  case gaussian
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformBlurMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformColorSpace) public enum TransformColorSpace : Swift.UInt {
  case rgb
  case cmyk
  case input
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformColorSpace : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformCropMode) public enum TransformCropMode : Swift.UInt, Swift.CustomStringConvertible {
  case thumb
  case crop
  case fill
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformCropMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformEnhancePreset) public enum TransformEnhancePreset : Swift.UInt, Swift.CustomStringConvertible {
  case auto
  case vivid
  case beautify
  case beautifyPlus
  case fixDark
  case fixNoise
  case fixTint
  case outdoor
  case fireworks
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformEnhancePreset {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformFiletype) public enum TransformFiletype : Swift.UInt, Swift.CustomStringConvertible {
  case doc
  case docx
  case html
  case jpg
  case odp
  case ods
  case odt
  case pjpg
  case pdf
  case png
  case ppt
  case pptx
  case svg
  case txt
  case webp
  case xls
  case xlsx
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformFiletype {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformFit) public enum TransformFit : Swift.UInt, Swift.CustomStringConvertible {
  case clip
  case crop
  case scale
  case max
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformFit {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformNoiseMode) public enum TransformNoiseMode : Swift.UInt, Swift.CustomStringConvertible {
  case none
  case low
  case medium
  case high
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformNoiseMode {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformPageFormat) public enum TransformPageFormat : Swift.UInt, Swift.CustomStringConvertible {
  case a2
  case a3
  case a4
  case a5
  case b4
  case b5
  case letter
  case legal
  case tabloid
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformPageFormat {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformPageOrientation) public enum TransformPageOrientation : Swift.UInt, Swift.CustomStringConvertible {
  case portrait
  case landscape
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformPageOrientation {
  public var description: Swift.String {
    get
  }
}
public typealias TransformPosition = ObjcDefs.FSTransformPosition
@objc(FSTransformShapeType) public enum TransformShapeType : Swift.UInt, Swift.CustomStringConvertible {
  case rect
  case oval
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformShapeType {
  public var description: Swift.String {
    get
  }
}
@objc(FSTransformStyleMode) public enum TransformStyleMode : Swift.UInt, Swift.CustomStringConvertible {
  case artwork
  case photo
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension TransformStyleMode {
  public var description: Swift.String {
    get
  }
}
@available(*, deprecated, renamed: "UploadState")
public typealias UploadStatus = UploadState
@objc(FSUploadStatus) public enum UploadState : Swift.UInt {
  case notStarted
  case inProgress
  case completed
  case cancelled
  @available(*, deprecated, message: "Marked for removal in version 3.0.")
  case failed
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
extension UploadState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Client {
  @discardableResult
  @available(*, deprecated, message: "Marked for removal in version 3.0. Please use upload(using:options:queue:uploadProgress:completionHandler:) instead")
  @objc dynamic public func multiPartUpload(from localURL: Foundation.URL, storeOptions: StorageOptions = StorageOptions(location: .s3, access: .private), useIntelligentIngestionIfAvailable: Swift.Bool = true, queue: Dispatch.DispatchQueue = .main, startUploadImmediately: Swift.Bool = true, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  @available(*, deprecated, message: "Marked for removal in version 3.0. Please use upload(using:options:queue:uploadProgress:completionHandler:) instead")
  @objc dynamic public func multiFileUpload(from localURLs: [Foundation.URL], storeOptions: StorageOptions = StorageOptions(location: .s3, access: .private), useIntelligentIngestionIfAvailable: Swift.Bool = true, queue: Dispatch.DispatchQueue = .main, startUploadImmediately: Swift.Bool = true, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> Uploader
}
extension Client {
  @discardableResult
  @objc dynamic public func uploadURL(using localURL: Foundation.NSURL, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  @objc dynamic public func uploadMultipleURLs(using localURLs: [Foundation.NSURL], options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> Uploader
  @discardableResult
  @objc dynamic public func uploadData(using data: Foundation.NSData, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  @objc dynamic public func uploadMultipleData(using multipleData: [Foundation.NSData], options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> Uploader
}
extension Data : Uploadable {
  public var filename: Swift.String? {
    get
  }
  public var size: Swift.UInt64? {
    get
  }
  public var mimeType: Swift.String? {
    get
  }
}
extension StorageOptions {
  public func asDictionary() -> [Swift.String : Any]
}
extension Transformable {
  @available(*, deprecated, message: "Marked for removal in version 3.0. Use the new store(using:base64Decode:queue:completionHandler) instead")
  @discardableResult
  @objc dynamic public func store(fileName: Swift.String? = nil, location: StorageLocation, path: Swift.String? = nil, container: Swift.String? = nil, region: Swift.String? = nil, access: StorageAccess, base64Decode: Swift.Bool, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (FileLink?, JSONResponse) -> Swift.Void) -> Self
}
extension URL : Uploadable {
  public var filename: Swift.String? {
    get
  }
  public var size: Swift.UInt64? {
    get
  }
  public var mimeType: Swift.String? {
    get
  }
}
@objc(FSClient) public class Client : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, security: Security? = nil)
  @available(*, deprecated, message: "Marked for removal in version 3.0. Please use `init(apiKey:security:)` instead.")
  @objc public init(apiKey: Swift.String, security: Security? = nil, storage _: StorageLocation)
  @objc deinit
  @objc override dynamic public init()
}
extension Client {
  @objc dynamic public var apiKey: Swift.String {
    @objc get
  }
  @objc dynamic public var security: Security? {
    @objc get
  }
}
extension Client {
  @objc dynamic public func fileLink(for handle: Swift.String) -> FileLink
  @objc dynamic public func transformable(handle: Swift.String) -> Transformable
  @objc dynamic public func transformable(handles: [Swift.String]) -> Transformable
  @objc dynamic public func transformable(externalURL: Foundation.URL) -> Transformable
  @objc dynamic public func transformable(externalURLs: [Foundation.URL]) -> Transformable
  @discardableResult
  public func upload(using uploadable: Uploadable, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (JSONResponse) -> Swift.Void) -> Uploader
  @discardableResult
  public func upload(using uploadables: [Uploadable]? = nil, options: UploadOptions = .defaults, queue: Dispatch.DispatchQueue = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping ([JSONResponse]) -> Swift.Void) -> DeferredAdd & Uploader
}
extension Client {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@available(*, deprecated, renamed: "DataResponse")
public typealias NetworkDataResponse = DataResponse
@_hasMissingDesignatedInitializers @objc(FSNetworkDataResponse) public class DataResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let data: Foundation.Data?
  @objc public var error: Swift.Error?
  @objc deinit
  @objc override dynamic public init()
}
extension DataResponse {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@available(*, deprecated, renamed: "DownloadResponse")
public typealias NetworkDownloadResponse = DownloadResponse
@_hasMissingDesignatedInitializers @objc(FSNetworkDownloadResponse) public class DownloadResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let temporaryURL: Foundation.URL?
  @objc final public let destinationURL: Foundation.URL?
  @objc public var error: Swift.Error?
  @objc deinit
  @objc override dynamic public init()
}
extension DownloadResponse {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc(FSFileLink) public class FileLink : ObjectiveC.NSObject {
  final public let apiKey: Swift.String
  final public let security: Security?
  @objc final public let handle: Swift.String
  @objc public var url: Foundation.URL {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension FileLink {
  @objc dynamic public func getContent(parameters: [Swift.String : Any]? = nil, queue: Dispatch.DispatchQueue? = .main, downloadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func getTags(queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (JSONResponse) -> Swift.Void)
  @objc dynamic public func getSafeForWork(queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (JSONResponse) -> Swift.Void)
  @objc dynamic public func getMetadata(options: MetadataOptions, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (JSONResponse) -> Swift.Void)
  @objc dynamic public func download(destinationURL: Foundation.URL, parameters: [Swift.String : Any]? = nil, queue: Dispatch.DispatchQueue? = .main, downloadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (DownloadResponse) -> Swift.Void)
  @objc dynamic public func delete(parameters: [Swift.String : Any]? = nil, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func overwrite(parameters: [Swift.String : Any]? = nil, fileURL: Foundation.URL, queue: Dispatch.DispatchQueue? = .main, uploadProgress: ((Foundation.Progress) -> Swift.Void)? = nil, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func overwrite(parameters: [Swift.String : Any]? = nil, remoteURL: Foundation.URL, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (DataResponse) -> Swift.Void)
  @objc dynamic public func transformable() -> Transformable
}
extension FileLink {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@available(*, deprecated, renamed: "JSONResponse")
public typealias NetworkJSONResponse = JSONResponse
@_hasMissingDesignatedInitializers @objc(FSNetworkJSONResponse) public class JSONResponse : ObjectiveC.NSObject {
  @objc final public let request: Foundation.URLRequest?
  @objc final public let response: Foundation.HTTPURLResponse?
  @objc final public let json: [Swift.String : Any]?
  @objc public var error: Swift.Error?
  @objc override dynamic public init()
  @objc deinit
}
extension JSONResponse {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSPolicy) public class Policy : ObjectiveC.NSObject {
  final public let expiry: Foundation.Date
  final public let call: PolicyCall?
  public var handle: Swift.String?
  public var url: Swift.String?
  public var maxSize: Swift.UInt?
  public var minSize: Swift.UInt?
  public var path: Swift.String?
  public var container: Swift.String?
  @objc convenience public init(expiry: Foundation.Date)
  @objc convenience public init(expiry: Foundation.Date, call: PolicyCall)
  @nonobjc public init(expiry: Foundation.Date, call: PolicyCall? = nil, handle: Swift.String? = nil, url: Swift.String? = nil, maxSize: Swift.UInt? = nil, minSize: Swift.UInt? = nil, path: Swift.String? = nil, container: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension Policy {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSSecurity) public class Security : ObjectiveC.NSObject {
  final public let encodedPolicy: Swift.String
  final public let signature: Swift.String
  @objc convenience public init(policy: Policy, appSecret: Swift.String) throws
  @objc public init(encodedPolicy: Swift.String, signature: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension Security {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSStorageOptions) public class StorageOptions : ObjectiveC.NSObject {
  @objc final public let location: StorageLocation
  @objc public var region: Swift.String?
  @objc public var container: Swift.String?
  @objc public var path: Swift.String?
  @objc public var filename: Swift.String?
  @objc public var mimeType: Swift.String?
  public var access: StorageAccess?
  @objc public var workflows: [Swift.String]?
  @objc convenience public init(location: StorageLocation)
  @objc convenience public init(location: StorageLocation, access: StorageAccess)
  @nonobjc public init(location: StorageLocation, region: Swift.String? = nil, container: Swift.String? = nil, path: Swift.String? = nil, filename: Swift.String? = nil, mimeType: Swift.String? = nil, access: StorageAccess? = nil, workflows: [Swift.String]? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension StorageOptions {
  @objc public static var defaults: StorageOptions
}
extension StorageOptions {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc(FSTransformable) public class Transformable : ObjectiveC.NSObject {
  @objc final public let apiKey: Swift.String
  @objc final public let security: Security?
  @objc public var handle: Swift.String? {
    @objc get
  }
  @objc public var handles: [Swift.String]? {
    @objc get
  }
  @objc public var externalURL: Foundation.URL? {
    @objc get
  }
  @objc public var externalURLs: [Foundation.URL]? {
    @objc get
  }
  @objc public var url: Foundation.URL {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Transformable {
  @discardableResult
  @objc(add:) dynamic public func add(transform: Transform) -> Self
  @discardableResult
  @objc dynamic public func debug() -> Self
  @discardableResult
  @objc dynamic public func store(using options: StorageOptions, base64Decode: Swift.Bool = false, queue: Dispatch.DispatchQueue? = .main, completionHandler: @escaping (FileLink?, JSONResponse) -> Swift.Void) -> Self
}
extension Transformable {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc(FSUploadOptions) public class UploadOptions : ObjectiveC.NSObject {
  @objc public static var defaultPartUploadConcurrency: Swift.Int
  @objc public static var defaultChunkUploadConcurrency: Swift.Int
  @objc public static var defaults: UploadOptions
  @objc public var preferIntelligentIngestion: Swift.Bool
  @objc public var startImmediately: Swift.Bool
  @objc public var deleteTemporaryFilesAfterUpload: Swift.Bool
  @objc public var storeOptions: StorageOptions
  @objc public var uploadTags: [Swift.String : Swift.String]
  @objc public var partUploadConcurrency: Swift.Int
  @objc public var chunkUploadConcurrency: Swift.Int
  @objc public init(preferIntelligentIngestion: Swift.Bool, startImmediately: Swift.Bool, deleteTemporaryFilesAfterUpload: Swift.Bool, storeOptions: StorageOptions = .defaults, uploadTags: [Swift.String : Swift.String] = [:], partUploadConcurrency: Swift.Int = UploadOptions.defaultPartUploadConcurrency, chunkUploadConcurrency: Swift.Int = UploadOptions.defaultChunkUploadConcurrency)
  @objc override dynamic public init()
  @objc deinit
}
extension UploadOptions {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers open class BaseOperation<Success> : Foundation.Operation {
  public typealias Result = Swift.Result<Success, Error>
  @objc override dynamic open var isReady: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func start()
  @objc override dynamic open func cancel()
  open func finish(with result: BaseOperation<Success>.Result)
  @objc override dynamic public init()
  @objc deinit
}
extension BaseOperation {
  open var result: BaseOperation<Success>.Result {
    get
  }
}
@objc(FSCancellable) public protocol Cancellable {
  @objc @discardableResult
  func cancel() -> Swift.Bool
}
public protocol DeferredAdd {
  @discardableResult
  func add(uploadables: [Uploadable]) -> Swift.Bool
}
@objc(FSMonitorizable) public protocol Monitorizable {
  @objc var progress: Foundation.Progress { get }
}
@objc(FSStartable) public protocol Startable {
  @objc @discardableResult
  func start() -> Swift.Bool
  @objc func uploadFiles()
}
public protocol Uploadable {
  var filename: Swift.String? { get }
  var size: Swift.UInt64? { get }
  var mimeType: Swift.String? { get }
}
@objc(FSUploader) public protocol Uploader : Cancellable, Monitorizable, Startable {
  @objc var uuid: Foundation.UUID { get }
  @objc var state: UploadState { get }
}
@_hasMissingDesignatedInitializers @objc(FSASCIITransform) public class ASCIITransform : Transform {
  @objc public init()
  @objc deinit
}
extension ASCIITransform {
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func foreground(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func colored() -> Self
  @discardableResult
  @objc dynamic public func size(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func reverse() -> Self
}
@_hasMissingDesignatedInitializers @objc(FSAVTransform) public class AVTransform : Transform {
  @objc public init()
  @objc deinit
}
extension AVTransform {
  @discardableResult
  @objc dynamic public func preset(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func force(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func width(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func height(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func title(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func extName(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func fileName(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func location(_ value: StorageLocation) -> Self
  @discardableResult
  @objc dynamic public func path(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func access(_ value: StorageAccess) -> Self
  @discardableResult
  @objc dynamic public func container(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func upscale(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func aspectMode(_ value: TransformAspectMode) -> Self
  @discardableResult
  @objc dynamic public func twoPass(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func videoBitRate(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func fps(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func keyframeInterval(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func audioBitRate(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func audioSampleRate(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func audioChannels(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func clipLength(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func clipOffset(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func watermarkURL(_ value: Foundation.URL) -> Self
  @discardableResult
  @objc dynamic public func watermarkTop(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func watermarkBottom(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func watermarkLeft(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func watermarkRight(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func watermarkWidth(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func watermarkHeight(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSAnimateTransform) public class AnimateTransform : Transform {
  @objc public init()
  @objc deinit
}
extension AnimateTransform {
  @discardableResult
  @objc dynamic public func delay(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func loop(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func width(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func height(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func fit(_ value: TransformFit) -> Self
  @discardableResult
  @objc dynamic public func align(_ value: TransformPosition) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: Swift.String) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSAutoImageTransform) public class AutoImageTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSBlackAndWhiteTransform) public class BlackAndWhiteTransform : Transform {
  @objc public init()
  @objc deinit
}
extension BlackAndWhiteTransform {
  @discardableResult
  @objc dynamic public func threshold(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSBlurFacesTransform) public class BlurFacesTransform : Transform {
  @objc public init()
  @objc deinit
}
extension BlurFacesTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func type(_ value: TransformShapeType) -> Self
  @discardableResult
  @objc dynamic public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func buffer(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func allFaces() -> Self
  @discardableResult
  @objc dynamic public func faces(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSBlurTransform) public class BlurTransform : Transform {
  @objc public init()
  @objc deinit
}
extension BlurTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSBorderTransform) public class BorderTransform : Transform {
  @objc public init()
  @objc deinit
}
extension BorderTransform {
  @discardableResult
  @objc dynamic public func width(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSCacheTransform) public class CacheTransform : Transform {
  @objc public init()
  @objc deinit
}
extension CacheTransform {
  @discardableResult
  @objc dynamic public func turnOff() -> Self
  @discardableResult
  @objc dynamic public func expiry(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func maxExpiry() -> Self
}
@_hasMissingDesignatedInitializers @objc(FSCircleTransform) public class CircleTransform : Transform {
  @objc public init()
  @objc deinit
}
extension CircleTransform {
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSCollageTransform) public class CollageTransform : Transform {
  @objc deinit
}
extension CollageTransform {
  @discardableResult
  @objc dynamic public func margin(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func cropFit() -> Self
  @discardableResult
  @objc dynamic public func autorotate() -> Self
}
@_inheritsConvenienceInitializers @objc(FSCollageTransformCollection) public class CollageTransformCollection : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension CollageTransformCollection {
  @discardableResult
  @objc(addResource:) dynamic public func add(_ resource: Swift.String) -> Self
  @discardableResult
  @objc(addResources:) dynamic public func add(_ resources: [Swift.String]) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSCompressTransform) public class CompressTransform : Transform {
  @objc public init()
  @objc deinit
}
extension CompressTransform {
  @discardableResult
  @objc dynamic public func metadata(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSConvertTransform) public class ConvertTransform : Transform {
  @objc public init()
  @objc deinit
}
extension ConvertTransform {
  @discardableResult
  @objc dynamic public func format(_ value: TransformFiletype) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func page(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func density(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func compress() -> Self
  @discardableResult
  @objc dynamic public func quality(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func preserveInputQuality() -> Self
  @discardableResult
  @objc dynamic public func strip() -> Self
  @discardableResult
  @objc dynamic public func colorSpace(_ value: TransformColorSpace) -> Self
  @discardableResult
  @objc dynamic public func secure() -> Self
  @discardableResult
  @objc dynamic public func docInfo() -> Self
  @discardableResult
  @objc dynamic public func pageFormat(_ value: TransformPageFormat) -> Self
  @discardableResult
  @objc dynamic public func pageOrientation(_ value: TransformPageOrientation) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSCopyrightTransform) public class CopyrightTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSCropFacesTransform) public class CropFacesTransform : Transform {
  @objc public init()
  @objc deinit
}
extension CropFacesTransform {
  @discardableResult
  @objc dynamic public func mode(_ value: TransformCropMode) -> Self
  @discardableResult
  @objc dynamic public func width(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func height(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func allFaces() -> Self
  @discardableResult
  @objc dynamic public func buffer(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func faces(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSCropTransform) public class CropTransform : Transform {
  @objc public init(x: Swift.Int, y: Swift.Int, width: Swift.Int, height: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSDetectFacesTransform) public class DetectFacesTransform : Transform {
  @objc public init()
  @objc deinit
}
extension DetectFacesTransform {
  @discardableResult
  @objc dynamic public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func export(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSDocumentDetectionTransform) public class DocumentDetectionTransform : Transform {
  @objc public init()
  @objc deinit
}
extension DocumentDetectionTransform {
  @discardableResult
  @objc dynamic public func coords(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func preprocess(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSEnhanceTransform) public class EnhanceTransform : Transform {
  @objc public init()
  @objc deinit
}
extension EnhanceTransform {
  @discardableResult
  @objc dynamic public func preset(_ value: TransformEnhancePreset) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSFallbackTransform) public class FallbackTransform : Transform {
  @objc public init()
  @objc deinit
}
extension FallbackTransform {
  @discardableResult
  @objc dynamic public func handle(_ value: Swift.String) -> Self
  @discardableResult
  @objc dynamic public func cache(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSFlipTransform) public class FlipTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSFlopTransform) public class FlopTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSImageSizeTransform) public class ImageSizeTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSMinifyCSSTransform) public class MinifyCSSTransform : Transform {
  @objc public init()
  @objc deinit
}
extension MinifyCSSTransform {
  @discardableResult
  @objc dynamic public func level(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func gzip(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSMinifyJSTransform) public class MinifyJSTransform : Transform {
  @objc public init()
  @objc deinit
}
extension MinifyJSTransform {
  @discardableResult
  @objc dynamic public func booleans(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func builtIns(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func consecutiveAdds(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func deadcode(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func evaluate(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func flipComparisons(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func guards(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func infinity(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func mangle(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func memberExpressions(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func mergeVars(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func numericLiterals(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func propertyLiterals(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func regexpConstructors(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func removeConsole(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func removeDebugger(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func removeUndefined(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func simplify(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func simplifyComparisons(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func typeConstructors(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func undefinedToVoid(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSModulateTransform) public class ModulateTransform : Transform {
  @objc public init()
  @objc deinit
}
extension ModulateTransform {
  @discardableResult
  @objc dynamic public func brightness(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func saturation(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func hue(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSMonochromeTransform) public class MonochromeTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSNegativeTransform) public class NegativeTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSNoMetadataTransform) public class NoMetadataTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSOCRTransform) public class OCRTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSOilPaintTransform) public class OilPaintTransform : Transform {
  @objc public init()
  @objc deinit
}
extension OilPaintTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPDFConvertTransform) public class PDFConvertTransform : Transform {
  @objc public init()
  @objc deinit
}
extension PDFConvertTransform {
  @discardableResult
  @objc dynamic public func pageOrientation(_ value: TransformPageOrientation) -> Self
  @discardableResult
  @objc dynamic public func pageFormat(_ value: TransformPageFormat) -> Self
  @discardableResult
  @objc dynamic public func pages(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPDFInfoTransform) public class PDFInfoTransform : Transform {
  @objc public init()
  @objc deinit
}
extension PDFInfoTransform {
  @discardableResult
  @objc dynamic public func colorInfo() -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPDFMonochromeTransform) public class PDFMonochromeTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSPartialBlurTransform) public class PartialBlurTransform : Transform {
  @objc public init(objects: [CoreGraphics.CGRect])
  @objc deinit
}
extension PartialBlurTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func type(_ value: TransformShapeType) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPartialPixelateTransform) public class PartialPixelateTransform : Transform {
  @objc public init(objects: [CoreGraphics.CGRect])
  @objc deinit
}
extension PartialPixelateTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func type(_ value: TransformShapeType) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPixelateFacesTransform) public class PixelateFacesTransform : Transform {
  @objc public init()
  @objc deinit
}
extension PixelateFacesTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int = 10) -> Self
  @discardableResult
  @objc dynamic public func type(_ value: TransformShapeType) -> Self
  @discardableResult
  @objc dynamic public func minSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func maxSize(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func buffer(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func blur(_ value: Swift.Float) -> Self
  @discardableResult
  @objc dynamic public func allFaces() -> Self
  @discardableResult
  @objc dynamic public func faces(_ value: [Swift.Int]) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPixelateTransform) public class PixelateTransform : Transform {
  @objc public init()
  @objc deinit
}
extension PixelateTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int = 2) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSPolaroidTransform) public class PolaroidTransform : Transform {
  @objc public init()
  @objc deinit
}
extension PolaroidTransform {
  @discardableResult
  @objc dynamic public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func rotate(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSProgressiveJpegTransform) public class ProgressiveJPEGTransform : Transform {
  @objc public init()
  @objc deinit
}
extension ProgressiveJPEGTransform {
  @discardableResult
  @objc dynamic public func quality(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func metadata(_ value: Swift.Bool) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSQualityTransform) public class QualityTransform : Transform {
  @objc public init(value: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSRedEyeRemovalTransform) public class RedEyeRemovalTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSResizeTransform) public class ResizeTransform : Transform {
  @objc public init()
  @objc deinit
}
extension ResizeTransform {
  @discardableResult
  @objc dynamic public func width(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func height(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func fit(_ value: TransformFit) -> Self
  @discardableResult
  @objc dynamic public func align(_ value: TransformAlign) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSRotateTransform) public class RotateTransform : Transform {
  @objc public init()
  @objc public init(deg: Swift.Int)
  @objc deinit
}
extension RotateTransform {
  @discardableResult
  @objc dynamic public func exif(_ value: Swift.Bool) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSRoundedCornersTransform) public class RoundedCornersTransform : Transform {
  @objc public init()
  @objc deinit
}
extension RoundedCornersTransform {
  @discardableResult
  @objc dynamic public func maxRadius() -> Self
  @discardableResult
  @objc dynamic public func radius(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func blur(_ value: Swift.Float = 0.3) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSSecureForWorkTransform) public class SecureForWorkTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSSepiaTransform) public class SepiaTransform : Transform {
  @objc public init()
  @objc deinit
}
extension SepiaTransform {
  @discardableResult
  @objc dynamic public func tone(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSShadowTransform) public class ShadowTransform : Transform {
  @objc public init()
  @objc deinit
}
extension ShadowTransform {
  @discardableResult
  @objc dynamic public func blur(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func opacity(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func vector(x: Swift.Int, y: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func color(_ value: UIKit.UIColor) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSSharpenTransform) public class SharpenTransform : Transform {
  @objc public init()
  @objc deinit
}
extension SharpenTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSTagsTransform) public class TagsTransform : Transform {
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FSTornEdgesTransform) public class TornEdgesTransform : Transform {
  @objc public init()
  @objc deinit
}
extension TornEdgesTransform {
  @discardableResult
  @objc dynamic public func spread(start: Swift.Int, end: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSTransform) public class Transform : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Transform {
  public typealias Animate = AnimateTransform
  public typealias ASCII = ASCIITransform
  public typealias AutoImage = AutoImageTransform
  public typealias AV = AVTransform
  public typealias BlackAndWhite = BlackAndWhiteTransform
  public typealias BlurFaces = BlurFacesTransform
  public typealias Blur = BlurTransform
  public typealias Border = BorderTransform
  public typealias Cache = CacheTransform
  public typealias Circle = CircleTransform
  public typealias Collage = CollageTransform
  public typealias Compress = CompressTransform
  public typealias Convert = ConvertTransform
  public typealias Copyright = CopyrightTransform
  public typealias CropFaces = CropFacesTransform
  public typealias Crop = CropTransform
  public typealias DetectFaces = DetectFacesTransform
  public typealias DocumentDetection = DocumentDetectionTransform
  public typealias Enhance = EnhanceTransform
  public typealias Fallback = FallbackTransform
  public typealias Flip = FlipTransform
  public typealias Flop = FlopTransform
  public typealias ImageSize = ImageSizeTransform
  public typealias MinifyCSS = MinifyCSSTransform
  public typealias MinifyJS = MinifyJSTransform
  public typealias Modulate = ModulateTransform
  public typealias Monochrome = MonochromeTransform
  public typealias Negative = NegativeTransform
  public typealias NoMetadata = NoMetadataTransform
  public typealias OCR = OCRTransform
  public typealias OilPaint = OilPaintTransform
  public typealias PartialBlur = PartialBlurTransform
  public typealias PartialPixelate = PartialPixelateTransform
  public typealias PDFConvert = PDFConvertTransform
  public typealias PDFInfo = PDFInfoTransform
  public typealias PDFMonochrome = PDFMonochromeTransform
  public typealias PixelateFaces = PixelateFacesTransform
  public typealias Pixelate = PixelateTransform
  public typealias Polaroid = PolaroidTransform
  public typealias ProgressiveJPEG = ProgressiveJPEGTransform
  public typealias Quality = QualityTransform
  public typealias RedEyeRemoval = RedEyeRemovalTransform
  public typealias Resize = ResizeTransform
  public typealias Rotate = RotateTransform
  public typealias RoundedCorners = RoundedCornersTransform
  public typealias SecureForWork = SecureForWorkTransform
  public typealias Sepia = SepiaTransform
  public typealias Shadow = ShadowTransform
  public typealias Sharpen = SharpenTransform
  public typealias TornEdges = TornEdgesTransform
  public typealias Upscale = UpscaleTransform
  public typealias URLScreenshot = URLScreenshotTransform
  public typealias Vignette = VignetteTransform
  public typealias Watermark = WatermarkTransform
  public typealias Zip = ZipTransform
}
@_hasMissingDesignatedInitializers @objc(FSURLScreenshotTransform) public class URLScreenshotTransform : Transform {
  @objc public init()
  @objc deinit
}
extension URLScreenshotTransform {
  @discardableResult
  @objc dynamic public func mobileAgent() -> Self
  @discardableResult
  @objc dynamic public func windowMode() -> Self
  @discardableResult
  @objc dynamic public func width(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func height(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func delay(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func orientation(_ value: TransformPageOrientation) -> Self
  @discardableResult
  @objc dynamic public func device(_ value: Swift.String) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSUpscaleTransform) public class UpscaleTransform : Transform {
  @objc public init()
  @objc deinit
}
extension UpscaleTransform {
  @discardableResult
  @objc dynamic public func noUpscale() -> Self
  @discardableResult
  @objc dynamic public func noise(_ value: TransformNoiseMode) -> Self
  @discardableResult
  @objc dynamic public func style(_ value: TransformStyleMode) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSVignetteTransform) public class VignetteTransform : Transform {
  @objc public init()
  @objc deinit
}
extension VignetteTransform {
  @discardableResult
  @objc dynamic public func amount(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func blurMode(_ value: TransformBlurMode) -> Self
  @discardableResult
  @objc dynamic public func background(_ value: UIKit.UIColor) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSWatermarkTransform) public class WatermarkTransform : Transform {
  @objc public init(file: Swift.String)
  @objc deinit
}
extension WatermarkTransform {
  @discardableResult
  @objc dynamic public func size(_ value: Swift.Int) -> Self
  @discardableResult
  @objc dynamic public func position(_ value: TransformPosition) -> Self
}
@_hasMissingDesignatedInitializers @objc(FSZipTransform) public class ZipTransform : Transform {
  @objc public init()
  @objc deinit
}
extension StorageAccess : Swift.Equatable {}
extension StorageAccess : Swift.Hashable {}
extension StorageAccess : Swift.RawRepresentable {}
extension StorageLocation : Swift.Equatable {}
extension StorageLocation : Swift.Hashable {}
extension StorageLocation : Swift.RawRepresentable {}
extension TransformAlign : Swift.Equatable {}
extension TransformAlign : Swift.Hashable {}
extension TransformAlign : Swift.RawRepresentable {}
extension TransformAspectMode : Swift.Equatable {}
extension TransformAspectMode : Swift.Hashable {}
extension TransformAspectMode : Swift.RawRepresentable {}
extension TransformBlurMode : Swift.Equatable {}
extension TransformBlurMode : Swift.Hashable {}
extension TransformBlurMode : Swift.RawRepresentable {}
extension TransformColorSpace : Swift.Equatable {}
extension TransformColorSpace : Swift.Hashable {}
extension TransformColorSpace : Swift.RawRepresentable {}
extension TransformCropMode : Swift.Equatable {}
extension TransformCropMode : Swift.Hashable {}
extension TransformCropMode : Swift.RawRepresentable {}
extension TransformEnhancePreset : Swift.Equatable {}
extension TransformEnhancePreset : Swift.Hashable {}
extension TransformEnhancePreset : Swift.RawRepresentable {}
extension TransformFiletype : Swift.Equatable {}
extension TransformFiletype : Swift.Hashable {}
extension TransformFiletype : Swift.RawRepresentable {}
extension TransformFit : Swift.Equatable {}
extension TransformFit : Swift.Hashable {}
extension TransformFit : Swift.RawRepresentable {}
extension TransformNoiseMode : Swift.Equatable {}
extension TransformNoiseMode : Swift.Hashable {}
extension TransformNoiseMode : Swift.RawRepresentable {}
extension TransformPageFormat : Swift.Equatable {}
extension TransformPageFormat : Swift.Hashable {}
extension TransformPageFormat : Swift.RawRepresentable {}
extension TransformPageOrientation : Swift.Equatable {}
extension TransformPageOrientation : Swift.Hashable {}
extension TransformPageOrientation : Swift.RawRepresentable {}
extension TransformShapeType : Swift.Equatable {}
extension TransformShapeType : Swift.Hashable {}
extension TransformShapeType : Swift.RawRepresentable {}
extension TransformStyleMode : Swift.Equatable {}
extension TransformStyleMode : Swift.Hashable {}
extension TransformStyleMode : Swift.RawRepresentable {}
extension UploadState : Swift.Equatable {}
extension UploadState : Swift.Hashable {}
extension UploadState : Swift.RawRepresentable {}
